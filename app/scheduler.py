"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è Kaspi E-commerce MVP
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ/–∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏/–µ–∂–µ–º–µ—Å—è—á–Ω–æ)
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import schedule
import time
import threading
import logging
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Callable, Optional
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import sys
APP_DIR = Path(__file__).resolve().parent
ROOT_DIR = APP_DIR.parent
sys.path.extend([str(APP_DIR), str(ROOT_DIR)])

from etl.scrape_kaspi import collect
from notify import tg_send
from economics import CostInputs, landed_cost, profit_per_unit
from pricing import choose_price_grid
from forecast import price_to_demand_linear


class TaskScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, config_path: str = "config/scheduler.json"):
        self.config_path = Path(config_path)
        self.data_dir = ROOT_DIR / "data"
        self.is_running = False
        self.scheduler_thread = None
        self.config = self.load_config()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.config_path.parent.mkdir(exist_ok=True)
        (ROOT_DIR / "logs").mkdir(exist_ok=True)
    
    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        default_config = {
            "data_collection": {
                "enabled": True,
                "times": ["08:00", "14:00", "20:00"],  # 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
                "categories": ["smartphones", "laptops", "tablets"],
                "pages": 2,
                "max_items": 100
            },
            "notifications": {
                "forecast_frequency": "daily",  # daily, weekly, biweekly, monthly
                "enabled": True,
                "time": "09:00"
            },
            "telegram": {
                "enabled": True,
                "send_errors": True,
                "send_summaries": True
            },
            "pricing": {
                "auto_update": True,
                "margin_target": 0.2,
                "elasticity": -1.0
            }
        }
        
        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                    elif isinstance(value, dict):
                        for subkey, subvalue in value.items():
                            if subkey not in config[key]:
                                config[key][subkey] = subvalue
                return config
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return default_config
        else:
            self.save_config(default_config)
            return default_config
    
    def save_config(self, config: dict = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if config is None:
            config = self.config
        
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def collect_market_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Ä—ã–Ω–∫–∞"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å Kaspi...")
            
            all_items = []
            config = self.config["data_collection"]
            
            for category in config["categories"]:
                try:
                    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    items = collect(
                        query_text=category,
                        pages=config["pages"],
                        delay=1.0,
                        headful=False,
                        mode="category",
                        max_items=config["max_items"],
                        detail_limit=0,
                        category=category,
                        sort="popularity"
                    )
                    
                    all_items.extend(items)
                    logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                    if self.config["telegram"]["send_errors"]:
                        tg_send(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ({category}): {str(e)[:200]}")
            
            if all_items:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                df = pd.DataFrame([{
                    "product_id": item.product_id,
                    "dt": datetime.now().strftime("%Y-%m-%d"),
                    "price_min": getattr(item, 'price', 0) or getattr(item, 'min_price', 0) or 0,
                    "price_med": getattr(item, 'price', 0) or getattr(item, 'median_price', 0) or 0,
                    "sellers": getattr(item, 'sellers_count', 1) or 1,
                    "rating": item.rating or 0.0,
                    "reviews": item.reviews or 0,
                    "page_rank": getattr(item, 'position', 0) or getattr(item, 'rank', 0) or 0,
                    "title": item.title or "",
                    "brand": item.brand or "",
                    "category": item.category or "",
                    "url": item.url or ""
                } for item in all_items])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º market_snapshot
                snapshot_path = self.data_dir / "market_snapshot_example.csv"
                df.to_csv(snapshot_path, index=False, encoding='utf-8-sig')
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤ –ø–∞–ø–∫—É daily
                daily_dir = self.data_dir / "daily"
                daily_dir.mkdir(exist_ok=True)
                daily_path = daily_dir / f"market_snapshot_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
                df.to_csv(daily_path, index=False, encoding='utf-8-sig')
                
                logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(all_items)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                if self.config["telegram"]["send_summaries"]:
                    summary_msg = (
                        f"üìä <b>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n"
                        f"–¢–æ–≤–∞—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: <b>{len(all_items)}</b>\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(config['categories'])}\n"
                        f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}"
                    )
                    tg_send(summary_msg)
                
                return True
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            if self.config["telegram"]["send_errors"]:
                tg_send(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:200]}")
            return False
    
    def generate_forecast_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_path = self.data_dir / "market_snapshot_example.csv"
            costs_path = self.data_dir / "costs_template.csv"
            
            if not market_path.exists() or not costs_path.exists():
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return
            
            market_df = pd.read_csv(market_path)
            costs_df = pd.read_csv(costs_path)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            merged = market_df.merge(costs_df, on="product_id", how="inner")
            
            if merged.empty:
                logger.warning("–ù–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
            top_items = merged.head(10)
            recommendations = []
            
            for _, row in top_items.iterrows():
                try:
                    # –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    costs = CostInputs(
                        purchase_cn=row["purchase_cn"],
                        intl_ship=row["intl_ship"],
                        customs=row["customs"],
                        last_mile=row["last_mile"],
                        pack=row["pack"],
                        return_rate=row["return_rate"],
                        mp_fee=row["mp_fee"],
                        ads_alloc=row["ads_alloc"],
                        overhead=row["overhead"]
                    )
                    
                    c_land = landed_cost(costs)
                    current_price = float(row["price_med"])
                    
                    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞
                    base_demand = 30.0  # –±–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å –≤ –Ω–µ–¥–µ–ª—é
                    elasticity = self.config["pricing"]["elasticity"]
                    q_func = price_to_demand_linear(base_demand, current_price, elasticity)
                    
                    # –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
                    best, grid = choose_price_grid(current_price, c_land, row["mp_fee"], q_func)
                    
                    recommendations.append({
                        "sku": row["product_id"],
                        "title": row.get("title", "")[:50],
                        "current_price": current_price,
                        "recommended_price": best[0],
                        "expected_profit": best[1],
                        "expected_demand": best[2],
                        "price_change": ((best[0] - current_price) / current_price * 100)
                    })
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {row['product_id']}: {e}")
                    continue
            
            if recommendations:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report_lines = ["üìà <b>–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n"]
                
                total_profit = sum(r["expected_profit"] for r in recommendations)
                avg_price_change = sum(abs(r["price_change"]) for r in recommendations) / len(recommendations)
                
                report_lines.append(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: <b>{len(recommendations)}</b> —Ç–æ–≤–∞—Ä–æ–≤")
                report_lines.append(f"–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å/–Ω–µ–¥: <b>{total_profit:,.0f} ‚Ç∏</b>")
                report_lines.append(f"–°—Ä–µ–¥–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: <b>{avg_price_change:.1f}%</b>\n")
                
                # –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                sorted_recs = sorted(recommendations, key=lambda x: x["expected_profit"], reverse=True)
                report_lines.append("<b>–¢–æ–ø-5 –ø–æ –ø—Ä–∏–±—ã–ª–∏:</b>")
                
                for i, rec in enumerate(sorted_recs[:5], 1):
                    change_emoji = "üî∫" if rec["price_change"] > 0 else "üîª" if rec["price_change"] < 0 else "‚û°Ô∏è"
                    report_lines.append(
                        f"{i}. {rec['title']} | "
                        f"{rec['recommended_price']:.0f}‚Ç∏ {change_emoji}{abs(rec['price_change']):.1f}% | "
                        f"~{rec['expected_profit']:.0f}‚Ç∏/–Ω–µ–¥"
                    )
                
                report_text = "\n".join(report_lines)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                if tg_send(report_text):
                    logger.info("–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                else:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                rec_df = pd.DataFrame(recommendations)
                rec_path = self.data_dir / f"recommendations_{datetime.now().strftime('%Y%m%d')}.csv"
                rec_df.to_csv(rec_path, index=False, encoding='utf-8-sig')
                logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {rec_path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            if self.config["telegram"]["send_errors"]:
                tg_send(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)[:200]}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        schedule.clear()
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
        if self.config["data_collection"]["enabled"]:
            for time_str in self.config["data_collection"]["times"]:
                schedule.every().day.at(time_str).do(self.collect_market_data)
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ {time_str}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if self.config["notifications"]["enabled"]:
            freq = self.config["notifications"]["forecast_frequency"]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å "frequency" –Ω–∞ "forecast_frequency"
            time_str = self.config["notifications"]["time"]
            
            if freq == "daily":
                schedule.every().day.at(time_str).do(self.generate_forecast_report)
            elif freq == "weekly":
                schedule.every().monday.at(time_str).do(self.generate_forecast_report)
            elif freq == "biweekly":
                schedule.every(2).weeks.at(time_str).do(self.generate_forecast_report)
            elif freq == "monthly":
                schedule.every(4).weeks.at(time_str).do(self.generate_forecast_report)
            
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {freq} –≤ {time_str}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.setup_schedule()
        self.is_running = True
        
        def run_scheduler():
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            try:
                while self.is_running:
                    schedule.run_pending()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            finally:
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        if self.config["telegram"]["enabled"]:
            msg = (
                f"üöÄ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω</b>\n"
                f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {', '.join(self.config['data_collection']['times'])}\n"
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {self.config['notifications']['frequency']} –≤ {self.config['notifications']['time']}"
            )
            tg_send(msg)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.config["telegram"]["enabled"]:
            tg_send("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            "running": self.is_running,
            "next_jobs": [str(job) for job in schedule.jobs],
            "config": self.config,
            "last_run": getattr(self, 'last_run', None)
        }
    
    def update_config(self, new_config: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config.update(new_config)
        self.save_config()
        
        if self.is_running:
            self.setup_schedule()
        
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_instance = None

def get_scheduler() -> TaskScheduler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global scheduler_instance
    if scheduler_instance is None:
        scheduler_instance = TaskScheduler()
    return scheduler_instance


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    scheduler = get_scheduler()
    
    print("–¢–µ—Å—Ç–∏—Ä—É—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    scheduler.collect_market_data()
    
    print("–¢–µ—Å—Ç–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    scheduler.generate_forecast_report()
    
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
    scheduler.start()
    time.sleep(30)
    scheduler.stop()