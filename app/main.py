# --- robust sys.path setup (–¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É app/ –∏ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ) ---
import sys
from pathlib import Path
APP_DIR = Path(__file__).resolve().parent
ROOT_DIR = APP_DIR.parent
for p in (str(APP_DIR), str(ROOT_DIR)):
    if p not in sys.path:
        sys.path.insert(0, p)
# -------------------------------------------------------------------

import streamlit as st
import pandas as pd
from notify import tg_send

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ app.)
from economics import (
    CostInputs, landed_cost, min_price_for_margin,
    roi_on_turnover, profit_per_unit,
    reorder_point, safety_stock, eoq, z_value_for_service
)

from pricing   import choose_price_grid
from forecast  import price_to_demand_linear

def read_csv_smart(path):
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´–±–∏—Ç—ã–µ¬ª —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
    encodings = ["utf-8", "utf-8-sig", "cp1251", "latin1"]
    last_err = None
    for enc in encodings:
        try:
            return pd.read_csv(path, encoding=enc, on_bad_lines="skip")
        except UnicodeDecodeError as e:
            last_err = e
            continue
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    raise last_err

st.set_page_config(page_title="Kaspi E-commerce MVP", layout="wide")
st.title("Kaspi E-commerce MVP ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω (–ø—Ä–æ—Ç–æ—Ç–∏–ø)")

st.markdown("""
–≠—Ç–æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API Kaspi. 
1) –û–±–Ω–æ–≤–∏ CSV –≤ –ø–∞–ø–∫–µ `data/`.
2) –ò—Å–ø–æ–ª—å–∑—É–π –≤–∫–ª–∞–¥–∫–∏: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ ‚Üí –ü–æ–ª–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ—à–ª–∏–Ω –∏ —Ç. –¥.) ‚Üí –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Üí–ó–∞–ø–∞—Å—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (KPI).
""")

tab1, tab2, tab3, tab4 = st.tabs(["–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", "–ü–æ–ª–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ—à–ª–∏–Ω –∏ —Ç. –¥.)", "–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ó–∞–ø–∞—Å—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (KPI)"])

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
data_dir = Path(__file__).resolve().parent.parent / "data"
market_path = data_dir / "market_snapshot_example.csv"
costs_path  = data_dir / "costs_template.csv"
inv_path    = data_dir / "inventory_template.csv"

with tab1:
    st.header("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    if market_path.exists():
        dfm = read_csv_smart(market_path)
        st.dataframe(dfm, use_container_width=True)
        st.caption("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ä–µ–∑–∞ —Ä—ã–Ω–∫–∞. –ü–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –ø–∞—Ä—Å–µ—Ä/ETL (1 –∏ 15 —á–∏—Å–ª–∞).")
    else:
        st.warning(f"–§–∞–π–ª {market_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

with tab2:
    st.header("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–ª–Ω–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ—à–ª–∏–Ω –∏ —Ç. –¥.)")
    if costs_path.exists():
        dfc = read_csv_smart(costs_path)
        st.dataframe(dfc, use_container_width=True)
        sku = st.selectbox("–í—ã–±–µ—Ä–∏ SKU", dfc["product_id"].tolist())
        row = dfc[dfc["product_id"]==sku].iloc[0].to_dict()
        c = CostInputs(
            purchase_cn=row["purchase_cn"],
            intl_ship=row["intl_ship"],
            customs=row["customs"],
            last_mile=row["last_mile"],
            pack=row["pack"],
            return_rate=row["return_rate"],
            mp_fee=row["mp_fee"],
            ads_alloc=row["ads_alloc"],
            overhead=row["overhead"],
        )
        c_land = landed_cost(c)
        col1, col2 = st.columns(2)
        col1.metric("–ü–æ–ª–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ—à–ª–∏–Ω –∏ —Ç. –¥.) (—Ç–≥/—à—Ç)", f"{c_land:,.0f}")
        pmin = min_price_for_margin(c_land, target_margin=0.2)
        col2.metric("–ú–∏–Ω. —Ü–µ–Ω–∞ –ø—Ä–∏ 20% –º–∞—Ä–∂–µ", f"{pmin:,.0f}")
        st.caption("–¶–µ–ª–µ–≤—É—é –º–∞—Ä–∂—É –∏ –∫–æ–º–∏—Å—Å–∏—é MP –¥–∞–ª—å—à–µ —É—á—Ç—ë–º –≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏.")
    else:
        st.warning(f"–§–∞–π–ª {costs_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

with tab3:
    st.header("–ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–¥–µ–º–æ)")
    if market_path.exists() and costs_path.exists():
        dfm = read_csv_smart(market_path)
        dfc = read_csv_smart(costs_path)
        merged = dfm.merge(dfc, on="product_id", how="inner")
        sku = st.selectbox("SKU –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞", merged["product_id"].tolist(), key="sku_fp")
        r = merged[merged["product_id"]==sku].iloc[0]

        st.subheader("–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        base_price = st.number_input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (p0)", value=float(r["price_med"]), step=10.0)
        base_q = st.number_input("–ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å/–Ω–µ–¥–µ–ª—é (–æ—Ü–µ–Ω–∫–∞)", value=30.0, step=1.0)
        elasticity = st.slider("–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)", min_value=-3.0, max_value=-0.1, value=-1.0, step=0.1)

        q_func = price_to_demand_linear(base_q=base_q, base_price=base_price, elasticity=elasticity)

        c = CostInputs(
            purchase_cn=r["purchase_cn"], intl_ship=r["intl_ship"], customs=r["customs"],
            last_mile=r["last_mile"], pack=r["pack"], return_rate=r["return_rate"],
            mp_fee=r["mp_fee"], ads_alloc=r["ads_alloc"], overhead=r["overhead"]
        )
        c_land = landed_cost(c)
        mp_fee = float(r["mp_fee"])

        best, grid = choose_price_grid(base_price, c_land, mp_fee, q_func)

        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        best_price, best_profit, best_q = best
        reason_lines = [
            f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ p0 = {base_price:.0f} ‚Ç∏",
            f"Landed cost = {c_land:.0f} ‚Ç∏; –∫–æ–º–∏—Å—Å–∏—è MP = {mp_fee*100:.1f}%",
            f"–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å–ø—Ä–æ—Å–∞ = {elasticity:.2f}; –±–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å/–Ω–µ–¥ = {base_q:.1f} —à—Ç",
            f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–Ω–∞ {best_price:.0f} ‚Ç∏ ‚Üí –ø—Ä–∏–±—ã–ª—å/–Ω–µ–¥ ~ {best_profit:.0f} ‚Ç∏ –ø—Ä–∏ —Å–ø—Ä–æ—Å–µ ~ {best_q:.1f} —à—Ç"
        ]
        st.info("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã:\n- " + "\n- ".join(reason_lines))
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∞–π—Å–∞ –≤ CSV (–Ω–∞ –æ–¥–Ω—É –≤—ã–±—Ä–∞–Ω–Ω—É—é SKU)
        price_export_df = pd.DataFrame([{
            "product_id": r["product_id"],
            "new_price": round(best_price, 2),
            "explain": "; ".join(reason_lines)
        }])
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å price_export.csv (—Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è SKU)",
            data=price_export_df.to_csv(index=False).encode("utf-8"),
            file_name="price_export.csv",
            mime="text/csv"
        )

        
        st.write("**–°–µ—Ç–∫–∞ —Ü–µ–Ω (¬±3%)** ‚Äî —Ü–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å/–Ω–µ–¥, –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞/–Ω–µ–¥:")
        res_df = pd.DataFrame(grid, columns=["price","profit_week","q_week"])
        st.dataframe(res_df.style.format({"price":"{:.0f}","profit_week":"{:.0f}","q_week":"{:.1f}"}), use_container_width=True)
        st.success(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: **{best[0]:.0f} ‚Ç∏**; –ø—Ä–∏–±—ã–ª—å/–Ω–µ–¥: **{best[1]:.0f} ‚Ç∏**; —Å–ø—Ä–æ—Å: **{best[2]:.1f} —à—Ç**")
        st.caption("–î–∞–ª—å—à–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ ML-–ø—Ä–æ–≥–Ω–æ–∑ (LightGBM) —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏.")
        
        # --- Telegram notify button (Pricing) ---
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ü–µ–Ω—ã –≤ Telegram", key="notify_price_one"):
            sku_id = str(r["product_id"])
            best_price, best_profit, best_q = best
            msg = (
                f"üßÆ <b>Pricing</b>\n"
                f"SKU: <code>{sku_id}</code>\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: <b>{best_price:.0f} ‚Ç∏</b>\n"
                f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç/–Ω–µ–¥: ~{best_profit:.0f} ‚Ç∏ –ø—Ä–∏ —Å–ø—Ä–æ—Å–µ ‚âà{best_q:.1f}\n"
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: p0={base_price:.0f}, landed={c_land:.0f}, "
                f"fee={mp_fee*100:.0f}%, —ç–ª–∞—Å—Ç={elasticity:.2f}, –±–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å={base_q:.1f}/–Ω–µ–¥"
            )
            ok = tg_send(msg)
            st.toast("–£—à–ª–æ –≤ Telegram ‚úÖ" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚ùå")

        
    else:
        st.warning("–ó–∞–≥—Ä—É–∑–∏ market_snapshot_example.csv –∏ costs_template.csv")

with tab4:
    st.header("–ó–∞–ø–∞—Å—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (KPI) (—á–µ—Ä–Ω–æ–≤–∏–∫)")
    if inv_path.exists():
        dfi = read_csv_smart(inv_path)

        st.subheader("–†–∞—Å—á—ë—Ç —Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞ (ROP), —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å–∞ –∏ EOQ")

        if market_path.exists():
            dfm = read_csv_smart(market_path)
        else:
            dfm = None
        
        if costs_path.exists():
            dfc = read_csv_smart(costs_path)
        else:
            dfc = None
        
        # –í—ã–±–æ—Ä SKU
        sku_inv = st.selectbox("SKU –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞–∫—É–ø–∞", dfi["product_id"].tolist(), key="sku_inv")
        row_inv = dfi[dfi["product_id"]==sku_inv].iloc[0].to_dict()
        
        # –ü—Ä–æ–∫–∏–Ω–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–º–∏—Å—Å–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if dfc is not None and sku_inv in dfc["product_id"].values:
            row_cost = dfc[dfc["product_id"]==sku_inv].iloc[0].to_dict()
            c_obj = CostInputs(
                purchase_cn=row_cost["purchase_cn"],
                intl_ship=row_cost["intl_ship"],
                customs=row_cost["customs"],
                last_mile=row_cost["last_mile"],
                pack=row_cost["pack"],
                return_rate=row_cost["return_rate"],
                mp_fee=row_cost["mp_fee"],
                ads_alloc=row_cost["ads_alloc"],
                overhead=row_cost["overhead"],
            )
            c_land_inv = landed_cost(c_obj)
        else:
            c_obj, c_land_inv = None, 0.0
        
        colA, colB, colC = st.columns(3)
        weekly_mean = colA.number_input("–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞/–Ω–µ–¥ (—à—Ç)", value=30.0, step=1.0)
        weekly_sigma = colB.number_input("–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ/–Ω–µ–¥ (—à—Ç)", value=8.0, step=1.0)
        service = colC.selectbox("–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞", [0.90, 0.95, 0.97, 0.98, 0.99], index=1)
        
        LT = int(row_inv["lead_time_days"])
        R  = int(row_inv["review_period_days"])
        on_hand  = int(row_inv["on_hand"])
        on_order = int(row_inv.get("on_order", 0))
        
        rop = reorder_point(weekly_mean, weekly_sigma, LT, R, service)
        ss  = safety_stock(weekly_sigma, LT, R, service)
        
        need_qty = max(0.0, rop - (on_hand + on_order))
        rec_qty = int(round(need_qty))
        
        col1, col2, col3 = st.columns(3)
        col1.metric("–°—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å (—à—Ç)", f"{ss:.0f}")
        col2.metric("–¢–æ—á–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ROP (—à—Ç)", f"{rop:.0f}")
        col3.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑ (—à—Ç)", f"{rec_qty}")
        
        st.caption(f"LT={LT} –¥–Ω, Review={R} –¥–Ω; On-hand={on_hand}, On-order={on_order}; Z‚âà{z_value_for_service(service):.2f}")
        
        # --- Telegram notify button ---
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∑–∞–∫—É–ø–∞ –≤ Telegram", key="notify_po_one"):
            msg = (
                f"üì¶ <b>–ó–∞–∫—É–ø</b>\n"
                f"SKU: <code>{sku_inv}</code>\n"
                f"ROP={rop:.0f}, SS={ss:.0f}, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–∫–∞–∑–∞—Ç—å: <b>{rec_qty} —à—Ç</b>\n"
                f"On-hand={on_hand}, On-order={on_order}, LT={LT} –¥, Review={R} –¥"
            )
            ok = tg_send(msg)
            st.toast("–£—à–ª–æ –≤ Telegram ‚úÖ" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚ùå")
        
        # EOQ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Äî –æ—Ü–µ–Ω–∫–∞ –≥–æ–¥–æ–≤–æ–≥–æ —Å–ø—Ä–æ—Å–∞ = weekly_mean*52
        with st.expander("EOQ (—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞)", expanded=False):
            D_annual = st.number_input("–ì–æ–¥–æ–≤–æ–π —Å–ø—Ä–æ—Å, —à—Ç/–≥–æ–¥", value=float(weekly_mean*52), step=50.0)
            S_order  = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ S (—Ç–≥/–∑–∞–∫–∞–∑)", value=20000.0, step=1000.0)
            H_hold   = st.number_input("–ì–æ–¥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è H (—Ç–≥/—à—Ç/–≥–æ–¥)", value= c_land_inv*0.20 if c_land_inv else 100.0, step=10.0)
            eoq_qty  = eoq(D_annual, S_order, H_hold)
            st.write(f"EOQ ‚âà **{eoq_qty:.0f} —à—Ç**")
        
        # –≠–∫—Å–ø–æ—Ä—Ç purchase_list.csv
        purchase_df = pd.DataFrame([{
            "product_id": sku_inv,
            "recommended_qty": rec_qty,
            "on_hand": on_hand,
            "on_order": on_order,
            "LT_days": LT,
            "review_days": R,
            "weekly_mean": weekly_mean,
            "weekly_sigma": weekly_sigma,
            "service_level": service,
            "ROP": int(round(rop)),
            "SafetyStock": int(round(ss)),
            "EOQ": int(round(eoq_qty)) if 'eoq_qty' in locals() else "",
        }])
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å purchase_list.csv (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–∫—É–ø–∞)",
            data=purchase_df.to_csv(index=False).encode("utf-8"),
            file_name="purchase_list.csv",
            mime="text/csv"
        )

        
        st.dataframe(dfi, use_container_width=True)
        st.caption("–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –¥–æ–±–∞–≤–∏–º ROP/EOQ, —Ä–∏—Å–∫ OOS –∏ KPI-–¥–∞—à–±–æ—Ä–¥.")
    else:
        st.warning(f"–§–∞–π–ª {inv_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω")













