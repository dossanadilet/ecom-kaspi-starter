import os
import requests
from pathlib import Path

def _load_env_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path(__file__).resolve().parent.parent / ".env"
    if env_path.exists():
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        if key and value and not os.getenv(key):
                            os.environ[key] = value
        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ .env

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
_load_env_file()

def _get_secret(name: str, default: str = "") -> str:
    # –†–∞–±–æ—Ç–∞–µ—Ç –∏ –ª–æ–∫–∞–ª—å–Ω–æ, –∏ –≤ Streamlit Cloud
    try:
        import streamlit as st
        return st.secrets.get(name, os.getenv(name, default))
    except Exception:
        return os.getenv(name, default)

def tg_send(text: str, parse_mode: str = "HTML") -> bool:
    token = _get_secret("TG_BOT_TOKEN")
    chat_id = _get_secret("TG_CHAT_ID")
    if not token or not chat_id:
        return False
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    resp = requests.post(url, data={
        "chat_id": chat_id,
        "text": text[:4000],   # –ª–∏–º–∏—Ç Telegram
        "parse_mode": parse_mode,
        "disable_web_page_preview": True
    }, timeout=15)
    return 200 <= resp.status_code < 300

def tg_test_connection() -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É"""
    token = _get_secret("TG_BOT_TOKEN")
    chat_id = _get_secret("TG_CHAT_ID")
    
    result = {
        "configured": False,
        "token_valid": False,
        "chat_accessible": False,
        "error": None
    }
    
    if not token or not chat_id:
        result["error"] = "TG_BOT_TOKEN –∏–ª–∏ TG_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        return result
    
    result["configured"] = True
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        url = f"https://api.telegram.org/bot{token}/getMe"
        resp = requests.get(url, timeout=10)
        
        if resp.status_code == 200:
            result["token_valid"] = True
            bot_info = resp.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            test_msg = "üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
            if tg_send(test_msg):
                result["chat_accessible"] = True
            else:
                result["error"] = "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
        else:
            result["error"] = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (HTTP {resp.status_code})"
            
    except Exception as e:
        result["error"] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
    
    return result

def get_telegram_status() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram"""
    token = _get_secret("TG_BOT_TOKEN")
    chat_id = _get_secret("TG_CHAT_ID")
    
    if not token or not chat_id or token == "your_telegram_bot_token_here" or chat_id == "your_telegram_chat_id_here":
        return "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        return "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
