services:
  api:
    build:
      context: .
      dockerfile: infra/docker/api.Dockerfile
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      minio:
        condition: service_started
    environment:
      - AUTO_SEED=true
      - TZ=${TZ}
    healthcheck:
      # Use python (present in image) instead of curl
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health', timeout=2).status==200 else sys.exit(1)"]
      interval: 10s
      timeout: 5s
      start_period: 20s
      retries: 10
    networks: [appnet]

  dashboard:
    build:
      context: .
      dockerfile: infra/docker/dashboard.Dockerfile
    env_file: .env
    environment:
      - API_BASE=http://api:8000
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
    networks: [appnet]

  worker:
    build:
      context: .
      dockerfile: infra/docker/worker.Dockerfile
    env_file: .env
    depends_on:
      - api
      - redis
    networks: [appnet]

  prefect:
    build:
      context: .
      dockerfile: infra/docker/prefect.Dockerfile
    env_file: .env
    ports:
      - "4200:4200"
    networks: [appnet]

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: kaspi
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d kaspi"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [appnet]

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks: [appnet]

  minio:
    image: minio/minio:RELEASE.2024-07-13T01-46-15Z
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks: [appnet]

  prometheus:
    image: prom/prometheus:v2.54.0
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks: [appnet]

  grafana:
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    volumes:
      - ./infra/grafana/dashboards.json:/var/lib/grafana/dashboards/dashboards.json:ro
    depends_on:
      - prometheus
    networks: [appnet]

  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/config.yml"]
    volumes:
      - ./infra/loki/config.yml:/etc/loki/config.yml:ro
    ports:
      - "3100:3100"
    networks: [appnet]

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
